{
  "$schema":"http://json-schema.org/draft-04/schema#",
  "description":" h2server configuration",
  "title":"h2server_configuration",
  "type":"object",
  "properties":{
    "address":{
      "description":"IP address",
      "default": "0.0.0.0",
      "type":"string"
    },
    "port":{
      "description":"port, 80, 443 ,etc.",
      "default": 80,
      "type":"integer"
    },
    "threads":{
      "description":"Number of threads. Recommendation: thead number matches number of cores",
      "default": 1,
      "type":"integer"
    },
    "private-key-file":{
      "description":"path to private key file",
      "type":"string"
    },
    "cert-file":{
      "description":"path to cert file",
      "type":"string"
    },
    "verbose":{
        "description": "true: print debug trace; false: no debug print",
        "default": false,
        "type":"boolean"
    },
    "Service":{
      "description":"service is a list of Request and Response pairs. Each response is associated with a Request, while the Request specifies the pattern the incoming request message should have, and if the incoming request matches the specified pattern, the corresponding Response is returned as the response of the incoming request message",
      "type":"array",
      "minItems":1,
      "items": {
        "type": "object",
        "description":"A pair of Request and Response",
        "properties":{
          "Request":{
            "description": "Request specifies the desired pattern that a incoming request message should have, which includes a list of matches of received headers, and optionally a list of matches of Json payload; if a request message passes all the header matches as well as the payload matches, then the corresponding content specified by Response would be returned as the response",
            "type":"object",
            "properties":{
              "headers":{
                "description": "Match to be executed against the received headers",
                "type":"array",
                "minItems":1,
                "items": {
                  "type": "object",
                  "description": "Match to be executed against one received header",
                  "properties":{
                    "header-name":{
                      "description": "This field specifies the name of a received header; the value of this header is to be picked up to run the match",
                      "default": ":path",
                      "type":"string"
                    },
                    "matchType":{
                      "type":"string",
                      "description": "Type of match action",
                      "default": "StartsWith",
                      "enum": ["EqualsTo", "StartsWith", "EndsWith", "Contains"]
                    },
                    "input":{
                      "description": "Content used to run the matchType above against the received header value; i.e., received header value should either equal to or start with or end with or contain the content specified in this field",
                      "default": "/",
                      "type":"string"
                    }
                  }
                }
              },
              "payload": {
                "description": "Array of matches to be executed against the received Json payload; only if all matches here are successful, the payload match is considered successful",
                "type":"array",
                "minItems":0,
                "items": {
                  "type": "object",
                  "description": "One match action to be executed against the received Json payload",
                  "properties":{
                    "JsonPointer": {
                      "description": "A Json pointer to locate a value within the received Json payload",
                      "type":"string"
                    },
                    "matchType": {
                      "type":"string",
                      "description": "Type of match action",
                      "enum": ["EqualsTo", "StartsWith", "EndsWith", "Contains"]
                    },
                    "input": {
                      "description": "Content used to execute the matchType above against the value specified by the Json pointer above; the value specified by the Json pointer above should either equal to or start with or end with or contain the content specified in this field",
                      "type":"string"
                    }
                  }
                }
              }
            },
            "required":[
              "headers"
            ]
          },
          "Response":{
            "description": "Response message to be returned in response to the request above",
            "type":"object",
            "properties":{
              "status-code": {
                "description": "status-code",
                "default": 200,
                "type": "integer"
              },
              "payload": {
                "description": "response payload",
                "type":"object",
                "properties":{
                  "msg-payload": {
                    "description": "The actual message payload. The payload can optionally contain a placeholder (name specified below) that may appear several times. For example: {'name': '$VAR', 'location': '$VAR', 'ID', '$VAR'}, here, $VAR is the placeholder. Each instance of $VAR would be replaced by an actual string as instructed by arguments field, in order of occurrance",
                    "type":"string"
                  },
                  "placeholder": {
                    "description": "A string that is embeded in msg-payload above acting as placeholders, for example, $VAR",
                    "type":"string"
                  },
                  "arguments": {
                    "description": "A list of arguments. The first argument would replace the first placeholder in msg-payload, and the second argument would replace the second placeholder, and so on. The number of arguments here should match the number of placeholder occurrances in msg-payload",
                    "type":"array",
                    "minItems":0,
                    "items": {
                      "type": "object",
                      "description": "The argument is to extract a value from either the Json payload of the received Request, or a header value of the received Request. An optional substring action specified by sub-string-start and sub-string-end can be applied to the value",
                      "properties":{
                        "type-of-value": {
                          "description": "how to identify the value: JsonPointer means to find the value from the received Json payload with the Json pointer specified by value-identifier field; Header means the value of the request header, with header name specified by value-identifier field",
                          "type":"string",
                          "enum": ["JsonPointer", "Header"]
                        },
                        "value-identifier":{
                          "description": "Either a Json pointer, e.g., /name representing 'bill' in {'name': 'bill', 'location': office', 'ID', '123'}; or a header name which points to a header of the received request",
                          "type":"string"
                        },
                        "sub-string-start":{
                          "description": "the start position from which the substring action would pick up the substring; default: 0, meaning the start of the string",
                          "default": 0,
                          "type": "integer"
                        },
                        "sub-string-end":{
                          "description": "the end position upon which the substring action would end. The charactor at the end position is execluded. -1 means the position after the last character, thus start 0 end -1 means the whole original string",
                          "default": -1,
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              },
              "additonalHeaders":{
              "description": "additional headers to be returned. Valid format for each header: pair of strings with : in the middle; for example: Content-type: Application/json",
              "type": "array",
              "items": {
                 "type": "string"
                }
              }
            }
          }
        },
        "required":[
           "Request",
           "Response"
        ]
      }
    }
  },
  "required":[
    "Service"
  ]
}
